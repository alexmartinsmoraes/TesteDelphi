Para esta implementação foi utilizado o Dephi Tokyo 10.2.3 



1) - Escrever testes para validar as funcionalidades principais.

Foram realizados procedimentos de testes funcionais 

 - Funções incorretas ou ausentes = Testado;
 - Erros de interface - = Testado erro ausente;
 - Erros em estruturas de dados = Testado erro ausente;
 - Erros em acessos a bancos de dados externos = Não contempla;
 - Erros de desempenho = Testado erro ausente
 - Erros de inicialização e término = Testado , erro ausente

Além desses foram realzaios os seguintes testes:
Teste de sistema
Teste de validação
Teste de carga
Teste de capacidade
Teste de stress.

Todos com sucesso!



2) - Demonstrar o uso de transações e Principais consultas SQL.

a)

select a.idprodutos, 
       a.codigobarras,
       a.nomeproduto,
       a.nomeReduzido,
   
    a.dataCadastro,
       a.ValorCusto,
    
   a.ValorVenda,

       a.Unidade,

       a.QtdEstoque,
       a.QtdEstoqueMin,

       a.MargemLucro,

       a.obs,
  
       b.NomeCategoria

from tabprodutos a 

inner join tabcategorias b on

a.codCategoria = b.idCategoria 



b)
procedure TDMProdutos.CarregaProdutos(oprodutos: TProdutos; Var iCodigo: Integer);
begin
   try
        FQryProdutos.Close;
        FQryProdutos.SQL.Clear;
        FQryProdutos.SQL.Add('select * from tabprodutos  where  idprodutos = :idprodutos');
        FQryProdutos.Params[0].Value:=iCodigo;
        FQryProdutos.Active:= True;
          with oprodutos do
          oprodutos.ID  := FQryProdutos.FieldByName('idprodutos').AsInteger;
          oprodutos.nomeproduto := FQryProdutos.FieldByName('nomeproduto').AsString;
          oprodutos.nomeReduzido:= FQryProdutos.FieldByName('nomeReduzido').AsString;
          oprodutos.dataCadastro:= FQryProdutos.FieldByName('dataCadastro').AsDateTime;
          oprodutos.codigobarras:= FQryProdutos.FieldByName('codigobarras').AsString;
          oprodutos.codCategoria:= FQryProdutos.FieldByName('codCategoria').AsInteger;
          oprodutos.ValorCusto:= FQryProdutos.FieldByName('ValorCusto').AsFloat;
          oprodutos.ValorVenda:= FQryProdutos.FieldByName('ValorVenda').AsFloat;
          oprodutos.MargemLucro:= FQryProdutos.FieldByName('MargemLucro').AsFloat;
          oprodutos.Unidade:= FQryProdutos.FieldByName('Unidade').AsString;
          oprodutos.QtdEstoque:= FQryProdutos.FieldByName('QtdEstoque').AsFloat;
          oprodutos.QtdEstoqueMin:= FQryProdutos.FieldByName('QtdEstoqueMin').AsFloat;
          oprodutos.Obs:= FQryProdutos.FieldByName('Obs').AsString;
      finally
    end;
end;

procedure TDMProdutos.ExcluirProdutos(iCodigo: integer);
begin
   FQryProdutos.Close;
   FQryProdutos.SQL.Clear;
   FQryProdutos.SQL.Add( 'Delete from  tabprodutos where  idprodutos = :idprodutos ');
   FQryProdutos.Params[0].AsInteger:= iCodigo;
   FQryProdutos.ExecSQL;
end;

function TDMProdutos.inserirProdutos(oprodutos: TProdutos; var sErro: String): Boolean;
begin
  with  oprodutos do
  Begin
    FQryProdutos.Close;
    FQryProdutos.SQL.Clear;
    FQryProdutos.SQL.add(' INSERT INTO tabprodutos(idprodutos,nomeproduto, nomeReduzido, dataCadastro, codigobarras, codCategoria, ValorCusto, ValorVenda, MargemLucro, Unidade, QtdEstoque , QtdEstoqueMin, obs )' );
    FQryProdutos.SQL.Add(' VALUES (:idprodutos, :nomeproduto, :nomeReduzido, :dataCadastro, :codigobarras, :codCategoria, :ValorCusto, :ValorVenda, :MargemLucro, :Unidade, :QtdEstoque , :QtdEstoqueMin, :obs)');
    FQryProdutos.Params[0].Value := oprodutos.ID;
    FQryProdutos.Params[1].Value := oprodutos.nomeproduto;
    FQryProdutos.Params[2].Value := oprodutos.nomeReduzido;
    FQryProdutos.Params[3].Value := oprodutos.dataCadastro;
    FQryProdutos.Params[4].Value := oprodutos.codigobarras;
    FQryProdutos.Params[5].Value := oprodutos.codCategoria;
    FQryProdutos.Params[6].Value := oprodutos.ValorCusto;
    FQryProdutos.Params[7].Value := oprodutos.ValorVenda;
    FQryProdutos.Params[8].Value := oprodutos.MargemLucro;
    FQryProdutos.Params[9].Value := oprodutos.Unidade;
    FQryProdutos.Params[10].Value := oprodutos.QtdEstoque;
    FQryProdutos.Params[11].Value := oprodutos.QtdEstoqueMin;
    FQryProdutos.Params[12].Value := oprodutos.Obs;
    FQryProdutos.ExecSQL;
     try
    Result:= True;
    Except on E: Exception do
    Begin
     sErro := 'Ocorreu um erro ao inserir Produtos: ' + sLineBreak + E.Message;
     Result:= False;
    End;
    end;
  End;
end;

c) 


procedure TFrmAtualizaEstoque.AtualizaEstoque(siatuacao: Integer);
begin
cdsTemporario.First;
while not cdsTemporario.Eof do
Begin
    QryAtualiza.Close;
    QryAtualiza.SQL.Clear;
    QryAtualiza.SQL.Add(' Update tabprodutos set QtdEstoque = :QtdEstoque');
    QryAtualiza.SQL.Add(' where idprodutos = :idprodutos ');
    if (siatuacao = 0) then
        QryAtualiza.ParamByName('QtdEstoque').AsFloat:= RetornaEstoque(cdsTemporarioCodigo.AsInteger) + cdsTemporarioquantidade.AsFloat
    else
       QryAtualiza.ParamByName('QtdEstoque').AsFloat:= RetornaEstoque(cdsTemporarioCodigo.AsInteger) - cdsTemporarioquantidade.AsFloat;
    QryAtualiza.ParamByName('idprodutos').AsInteger:=  cdsTemporarioCodigo.AsInteger;
   QryAtualiza.ExecSQL;
 cdsTemporario.Next;
 end;
end;

procedure TFrmAtualizaEstoque.BitAtualizarClick(Sender: TObject);
begin
if (cdsTemporario.RecordCount=0) then
   Begin
   Application.MessageBox(pchar('Nenhum Produto foi digitado para atualizar Estoque '), ' Atenção Usuário !', MB_ICONINFORMATION + mb_OK + mb_DefButton1);
   edtCodigo.SetFocus;
   exit;
   End;
if (RadioGroup1.ItemIndex = -1)  Then
      Application.MessageBox(pchar('Verifique Parâmetro "Para mais" ou "Para menos" para atualizar Estque de Produtos'), ' Atenção Usuário !', MB_ICONINFORMATION + mb_OK + mb_DefButton1)
else
  AtualizaEstoque(RadioGroup1.ItemIndex);
  Close;
end;

procedure TFrmAtualizaEstoque.btnEcluirClick(Sender: TObject);
begin
if MessageDLG(' Confirma Excluir o Registro ? '+#13+ '', mtconfirmation,[mbYes,mbNo],1 )= mrYes then
   Begin
   cdsTemporario.Delete;
   Application.MessageBox(pchar('Registro Excluido com Sucesso '), ' Atenção Usuário !', MB_ICONINFORMATION + mb_OK + mb_DefButton1);
   End;
end;

procedure TFrmAtualizaEstoque.btnFecharClick(Sender: TObject);
begin
Close;
end;

procedure TFrmAtualizaEstoque.edtCodigoExit(Sender: TObject);
begin
if trim(edtCodigo.Text) <> EmptyStr then
    Begin
    FQryProdutos.Close;
    FQryProdutos.SQL.Clear;
    FQryProdutos.SQL.Add('SELECT idprodutos, nomeproduto, QtdEstoque FROM produtos.tabprodutos');
    FQryProdutos.SQL.Add(' where idprodutos = :idprodutos');
    FQryProdutos.ParamByName('idprodutos').AsInteger:=  StrToInt(trim(edtCodigo.Text));
    FQryProdutos.Open();
    if Not FQryProdutos.Eof then
       Begin
       edtCodigo.Text:= IntToStr(FQryProdutosidprodutos.AsInteger);
       edtDescricao.Text:=trim(FQryProdutosnomeproduto.AsString);
       End
    else
    Begin
    Application.MessageBox(pchar(' Produto Não Cadastrado '), ' Atenção Usuário !', MB_ICONINFORMATION + mb_OK + mb_DefButton1);
    exit;
    edtCodigo.SetFocus;
    End;
    End;
end;

procedure TFrmAtualizaEstoque.edtCodigoKeyPress(Sender: TObject; var Key: Char);
begin
if key=#13 then begin
   key:=#0;
   selectnext(activecontrol,true,true);
   edtQtde.SetFocus;
   end;
 If not( key in['0'..'9',#08] ) then
  key:=#0;
end;

procedure TFrmAtualizaEstoque.edtQtdeExit(Sender: TObject);
begin
if trim(edtQtde.Text) <> EmptyStr then
   GravaDados(StrToInt(trim(edtCodigo.Text)),StrToFloat(trim(edtQtde.Text)));
end;

procedure TFrmAtualizaEstoque.edtQtdeKeyPress(Sender: TObject; var Key: Char);
begin
if key=#13 then begin
   key:=#0;
   selectnext(activecontrol,true,true);
   edtCodigo.SetFocus;
   end;
 If not( key in['0'..'9',#08] ) then
  key:=#0;
end;

procedure TFrmAtualizaEstoque.FormShow(Sender: TObject);
begin
cdsTemporario.Open;
edtCodigo.SetFocus;
end;

procedure TFrmAtualizaEstoque.GravaDados(Codigo: Integer; Qtd: Real);
begin
cdsTemporario.Append;
cdsTemporario.FieldByName('CODIGO').AsInteger := StrToInt(edtCodigo.Text);
cdsTemporario.FieldByName('nomeproduto').AsString := trim(edtDescricao.Text);
cdsTemporario.FieldByName('quantidade').AsInteger := StrToInt(edtQtde.Text);
cdsTemporario.Post;
end;

function TFrmAtualizaEstoque.RetornaEstoque(sCodigo: Integer): Real;
begin
 FQryProdutos.Close;
 FQryProdutos.SQL.Clear;
 FQryProdutos.SQL.Add('SELECT idprodutos,nomeproduto,QtdEstoque FROM produtos.tabprodutos ');
 FQryProdutos.SQL.Add(' where idprodutos = :idprodutos');
 FQryProdutos.ParamByName('idprodutos').AsInteger:=  sCodigo;
 FQryProdutos.Open();
    if Not FQryProdutos.Eof then
    Result:= FQryProdutosQtdEstoque.AsFloat;